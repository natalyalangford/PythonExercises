What is a List?
In Python, a list is one of the many built-in data structures that allows us to work with a collection of data in sequential order.
Suppose we want to make a list of the heights of students in a class:
	• Noelle is 61 inches tall
	• Ava is 70 inches tall
	• Sam is 67 inches tall
	• Mia is 64 inches tall
In Python, we can create a variable called heights to store these integers into a list:
heights = [61, 70, 67, 64]

Notice that:
	1. A list begins and ends with square brackets ([ and ]).
	2. Each item (i.e., 67 or 70) is separated by a comma (,)
	3. It’s considered good practice to insert a space ( ) after each comma, but your code will run just fine if you forget the space.



What can a List contain?
Lists can contain more than just numbers:
	- Instead of storing each student’s height, we can make a list that contains their names:
names = ["Noelle", "Ava", "Sam", "Mia"]

	- We can even combine multiple data types in one list. For example, this list contains both a string and an integer:
mixed_list_string_number = ["Noelle", 61]

	- Lists can contain any data type in Python! For example, this list contains a string, integer, boolean, and float:
mixed_list_common = ["Mia", 27, False, 0.5]



Empty Lists
A list doesn’t have to contain anything. Create an empty list like this:
empty_list = []

Why would we create an empty list?
	- Planning on filling it up later based on some other input



List Methods
For any specific data-type ( strings, booleans, lists, etc. ) there is built-in functionality  to create, manipulate, and delete data.
	-  Call this built-in functionality a method.
For lists, methods will follow the form of list_name.method(). 
	- Some methods will require an input value that will go between the parenthesis of the method ( ).
	
An example of a popular list method is .append(), which allows us to add an element to the end of a list.
append_example = [ 'This', 'is', 'an', 'example']
append_example.append('list')
print(append_example)

Will output:
['This', 'is', 'an', 'example', 'list']




Growing a List: Append
Add a single element to a list using the .append() Python method.
	- Empty list called garden:
garden = []

	- Add the element "Tomatoes" by using the .append() method:
garden.append("Tomatoes")

print(garden)

	- Will output:
['Tomatoes']
We see that garden now contains "Tomatoes"!

	- When we use .append() on a list that already has elements, our new element is added to the end of the list:
# Create a list
garden = ["Tomatoes", "Grapes", "Cauliflower"]
# Append a new element
garden.append("Green Beans")
print(garden)

Will output:
['Tomatoes', 'Grapes', 'Cauliflower', 'Green Beans']




Growing a List: Plus (+)
To add multiple items to a list,  use + to combine two lists 
	- Also known as concatenation
List of items sold at a bakery called items_sold:
items_sold = ["cake", "cookie", "bread"]

Suppose the bakery wants to start selling "biscuit" and "tart":
items_sold_new = items_sold + ["biscuit", "tart"]
print(items_sold_new)

Would output:
['cake', 'cookie', 'bread', 'biscuit', 'tart']

In this example, we created a new variable, items_sold_new, which contained both the original items sold, and the new items.
	-  We can inspect the original items_sold and see that it did not change:
print(items_sold)

Would output:
['cake', 'cookie', 'bread']

We can only use + with other lists. If we type in this code:
my_list = [1, 2, 3]
my_list + 4

we will get the following error:
TypeError: can only concatenate list (not "int") to list

If we want to add a single element using +, we have to put it into a list with brackets ([]):
my_list + [4]




Accessing List Elements
We are interviewing candidates for a job. We will call each candidate in order, represented by a Python list:
calls = ["Juan", "Zofia", "Amare", "Ezio", "Ananya"]

First, we’ll call "Juan", then "Zofia", etc.

In Python, we call the location of an element in a list its index.
	- Python lists are zero-indexed. 
	- This means that the first element in a list has index 0, rather than 1.




Accessing List Elements: Negative Index
What if we want to select the last element of a list?
	- We can use the index -1 to select the last item of a list
	-  Even when we don’t know how many elements are in a list.
Consider the following list with 6 elements:
pancake recipe = ["eggs", "flour", "butter", "milk", "sugar", "love"]

	- If we select the -1 index, we get the final element, "love".
		print(pancake_recipe[-1])

	- Would output:
		love

	- This is equivalent to selecting the element with index 5:
		print(pancake_recipe[5])

	- Would output:
		Love
		
		
	

Modifying List Elements
Let’s return to our garden.
garden = ["Tomatoes", "Green Beans", "Cauliflower", "Grapes"]
	- Unfortunately, we forgot to water our cauliflower and we don’t think it is going to recover.
	- Thankfully our friend Jiho from Petal Power came to the rescue. Jiho gifted us some strawberry seeds. We will replace the cauliflower with our new seeds.
We will need to modify the list to accommodate the change to our garden list. 
	- To change a value in a list, reassign the value using the specific index.
		garden[2] = "Strawberries"
		print(garden)
		
		Will output:
		["Tomatoes", "Green Beans", "Strawberries", "Grapes"]
		
		Negative indices will work as well.
		garden[-1] = "Raspberries"
		print(garden)
		
		Will output:
		["Tomatoes", "Green Beans", "Strawberries", "Raspberries"]
		



Shrinking a List: Remove
Remove elements in a list using the .remove() Python method.
	- Suppose we have a filled list called shopping_line that represents a line at a grocery store:
	shopping_line = ["Cole", "Kip", "Chris", "Sylvana"]
	
		○ We could remove "Chris" by using the .remove() method:
	shopping_line.remove("Chris")
	
	print(shopping_line)
	
		○ If we examine shopping_line, we can see that it now doesn’t contain "Chris":
	["Cole", "Kip", "Sylvana"]
	
	- We can also use .remove() on a list that has duplicate elements.
		○ Only the first instance of the matching element is removed:
	# Create a list
	shopping_line = ["Cole", "Kip", "Chris", "Sylvana", "Chris"]
	
	# Remove a element
	shopping_line.remove("Chris")
	print(shopping_line)
	
		○ Will output:
	["Cole", "Kip", "Sylvana", "Chris"]

